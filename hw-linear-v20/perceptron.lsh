; Perceptron learning procedure code
(libload "learner.lsh")

#? * perceptron-solver
(defclass perceptron-solver learner)

(defmethod perceptron-solver name () "Perceptron")
(defmethod perceptron-solver perceptron-solver(dataset)
  (==> this learner dataset))

(defmethod perceptron-solver per-sample-loss (row output)
  (/ (square (- (output) (==> this threshold-f row))) 2))

(defmethod perceptron-solver solve ()
  (let ((counter 0) (converged ())) 
    (while (and (< counter 100000) (not converged))
      (setq converged (==> this iterate-weights-once))
      (setq counter (+ counter 1)))
   (if converged counter ())))
  
(defmethod perceptron-solver iterate-weights-once ()
  (let ((converged t))
    (idx-bloop ((row :my-data:inputs-train) (output :my-data:outputs-train))
      (setq converged
        (and converged (==> this iterate-weights-for-row row output))))
    converged))

(defmethod perceptron-solver iterate-weights-for-row (row output)
  (let ((z (- (output) (==> this threshold-f row))))
    (if (<> z 0)
     (for (i 0 (- (idx-dim :my-data:inputs 1) 1))
       (weights i                          ;; set the ith element of weights 
          (+ (weights i) (* z (row i))));; to Wi + (Yp - f(W,Xp))Xp
        ())
      t )))
          ;; map the row of the ouput and the weight to a new weight

(de square(x) (* x x))
